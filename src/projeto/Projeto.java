/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projeto;

import com.sun.org.apache.xerces.internal.impl.xpath.regex.Match;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.time.Clock;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author EU
 */
public class Projeto extends javax.swing.JFrame implements Runnable {

    private boolean left;
    private boolean right;
    private boolean front;
    private boolean down;
    private boolean fimJogo;
    private boolean keyRestart;
    private long tempo;
    private long ult_carrinho;
    private long ultimaFaixa;
    private long difi = 1;
    private int tmp=1;
    private int larg = 80;
    private long pontua = 0;
    private int addpontua =1;
    
    /**
     * Creates new form Projeto
     */
    public Projeto() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(480, 566));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
                                
        if(evt.getKeyCode() == KeyEvent.VK_LEFT){
            left = true;
        }
        else if(evt.getKeyCode() == KeyEvent.VK_RIGHT){
            right = true;
        }
        else if(evt.getKeyCode() == KeyEvent.VK_R){
            keyRestart = true;
        }                                
        else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = true;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
                                        
        if(evt.getKeyCode() == KeyEvent.VK_LEFT){
            left = false;
        }
        else if(evt.getKeyCode() == KeyEvent.VK_RIGHT){
            right = false;
        }
        else if(evt.getKeyCode() == KeyEvent.VK_R){
            keyRestart = false;
        }                                
    else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = false;
        }
   
    }//GEN-LAST:event_formKeyReleased
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Projeto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Projeto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Projeto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Projeto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Projeto().setVisible(true);
            }
        });
    }
    
    @Override
    public void run(){
        
        Graphics g;
        Cenario cenario = new Cenario("img/4-faixas.png");
        ArrayList<Base> lista = new ArrayList();
        ArrayList<Base> lista_ini = new ArrayList();
        ArrayList<Base> lixo = new ArrayList();
        Random r = new Random();
        Carrinho c_random = new Carrinho();
        Carrinho player = new Carrinho();
        Faixas faixa = new Faixas();
        
        player.setLargura(80);
        player.setAltura(90);
        player.setIncY(0);
        player.setIncX(0);
        player.setX(getWidth()/2 + 3);
        player.setY(getHeight() - player.getAltura() - 15);
        lista.add(player);
        


        while(true){
            
            g = getBufferStrategy().getDrawGraphics();
            g.setColor(Color.LIGHT_GRAY);
            g.fillRect(0,0,getWidth(), getHeight());
            
            
               for (Base b : lista_ini) {
                if (player.colisao(b)) {
                    lixo.add(player);
                    addpontua = 0;
                    fimJogo = true;
                }
             }
               
             for (Base b : lista) {
                Colisao aux = player.trataColisao(getWidth(), getHeight());
                if (aux  == Colisao.UP || aux == Colisao.RIGHT || aux == Colisao.LEFT || aux == Colisao.DOWN) {
                    lixo.add(player);
                    addpontua = 0;
                }
                
            for(Base b1: lista){
                
                Colisao aux1 =  player.trataColisao(getWidth(), getHeight());
                if(aux1 == Colisao.RIGHT)
                    
                {
                    player.setIncX(0);
                    
                    right = false;
                    fimJogo = true;
                }
                if(aux1 == Colisao.LEFT)
                {
                    player.setIncX(0);
                    left = false;
                    fimJogo= true;
                }
                
                if(aux1 == Colisao.DOWN)
                {
                    lixo.add(player);
                    fimJogo= true;
                    
                }
            }
            }
             
             cenario.desenhar(g);
 
            
            for(Base base: lista)
                base.desenhar(g);
 
            for(Base base: lista)
                base.mover();

            if(left){
              player.setIncX(-1);
            }
            else 
                if(right){
                    player.setIncX(1);
            }
            else{
                        player.setIncX(0);
                        player.setIncY(0);
                }
            
            tempo = System.currentTimeMillis();
                    
                    if(tempo>difi + 10000){
                         tmp +=1;
                         difi=tempo;
                    }
            
            
                  if(tempo > ult_carrinho + 999)
                  {
                      
                      ult_carrinho = tempo;
                      
                      c_random = new Carrinho();
                      c_random.setCor(Color.red);
                      c_random.setAltura(90);
                      c_random.setLargura(75);
                      c_random.setIncY(tmp);
                      c_random.setIncX(0);
                      c_random.setX(getWidth()/2+larg);
                      c_random.setY(30);
                      
                    lista.add(c_random);
                    lista_ini.add(c_random);
                    
                    larg=larg*-1;
                  
                  }
            
       if (fimJogo) {
                g.setColor(Color.WHITE);
                g.drawString("FIM de JOGO - Tecle R para Reiniciar", 150, 100);
                fimJogo = true;
            }

            if (fimJogo && keyRestart) {
                
                player = new Carrinho();
                
                    player.setLargura(80);
                    player.setAltura(90);
                    player.setIncY(0);
                    player.setIncX(0);
                    player.setX(getWidth()/2+ 3);
                    player.setY(getHeight() - player.getAltura() - 15);
                    lista.add(player);
                    difi=tmp;
                    tmp=1;
                    pontua = 0;
                    addpontua =1;
                    
                fimJogo = false;
            }
            
             g.drawString("Pontuação: " + pontua  + "m", 10, (getHeight()-20) );
             if(tempo > ultimaFaixa + 500)
                  {
                      ultimaFaixa = tempo;
                      
                    faixa = new Faixas();
                    faixa.setCor(Color.WHITE);
                    faixa.setLargura(8);
                    faixa.setAltura(30);
                    faixa.setIncY(1);
                    faixa.setIncX(0);
                    faixa.setY(30);
                    faixa.setX(getWidth()/2);
                    lista.add(0,faixa);

                  }

            lista.removeAll(lixo);
            lixo.clear();
            
            pontua += addpontua;
            
            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
                Logger.getLogger(Projeto.class.getName()).log(Level.SEVERE, null, ex);
            }
            

            
        }
    }
        
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
